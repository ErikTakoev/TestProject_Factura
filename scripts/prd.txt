# Документація вимог до продукту (PRD): Unity Car Survival Game

<context>
# Огляд проекту
Гра на Unity, де гравець керує автомобілем, який рухається вперед з постійною швидкістю, та турелею для знищення ворогів. Гра представляє собою суміш runner та shooter жанрів, де гравець повинен вижити, знищуючи ворогів, які намагаються атакувати автомобіль.

# Основні особливості
- **Автомобіль з постійним рухом вперед** - Автомобіль рухається автоматично з постійною швидкістю, гравець не контролює його рух.
- **Керована турель** - Гравець керує турелею на автомобілі, яка може обертатися та стріляти по ворогах.
- **Система ворогів** - Вороги генеруються процедурно, переслідують автомобіль та атакують його при наближенні.
- **Система здоров'я** - Автомобіль має HP, яке зменшується при атаках ворогів.
- **Умови перемоги/поразки** - Гравець перемагає, дійшовши до кінця рівня, або програє, якщо HP автомобіля падає до нуля.

# Користувацький досвід
- **Цільова аудиторія**: Казуальні гравці, які шукають швидкий та динамічний геймплей.
- **Основний геймплей**: Гравець керує турелею, знищуючи ворогів, поки автомобіль автоматично рухається вперед.
- **Керування**: Підтримка як миші (для ПК), так і тач-керування (для мобільних пристроїв).
- **Інтерфейс**: Мінімалістичний UI з відображенням здоров'я автомобіля та екранами перемоги/поразки.
</context>

<PRD>
# Технічна архітектура

## Системні компоненти
1. **Core** - Базові інтерфейси, конфігурації та DI контейнер:
   - Інтерфейси: ICarController, IEnemyController, ITurretController, ICameraController, IGameManager
   - Конфігурації: CarConfig, EnemyConfig, GameConfig (ScriptableObjects)
   - DI: VContainer для ін'єкції залежностей

2. **Gameplay** - Основні ігрові компоненти:
   - Car: Автомобіль з Rigidbody, HP системою та рухом вперед
   - Enemy: Вороги з State Machine (Idle, Chase, Attack)
   - Turret: Турель з обертанням та стрільбою
   - Camera: Камера з двома режимами (Static, Follow)

3. **Managers** - Керуючі системи:
   - GameManager: Керування станами гри (Menu, Playing, GameOver, Win)
   - UIManager: Керування інтерфейсом користувача

4. **Utility** - Допоміжні класи:
   - ObjectPool: Система пулінгу об'єктів для ворогів та куль
   - GameEvents: Централізована система подій

## Шаблони проектування
1. **Dependency Injection** - Використання VContainer для ін'єкції залежностей
2. **Observer Pattern** - Система подій для комунікації між компонентами
3. **State Machine** - Для керування станами ворогів
4. **Object Pool** - Для оптимізації створення/знищення ворогів та куль
5. **Strategy Pattern** - Для різних типів ворогів (опціонально)

## Технічні вимоги
1. **Unity версія**: 2022.3.x LTS
2. **Пакети**:
   - VContainer (DI фреймворк)
   - UniTask (асинхронне програмування)
3. **Цільові платформи**:
   - Windows/Mac (основна)
   - Мобільні пристрої (опціонально)

# План розробки

## MVP (Мінімальний життєздатний продукт)
1. **Базова механіка руху**:
   - Автомобіль з Rigidbody, що рухається вперед з постійною швидкістю
   - Система здоров'я (HP) для автомобіля
   - Зациклення рівня для безперервного руху

2. **Система ворогів**:
   - EnemyController з базовою State Machine
   - Процедурна генерація ворогів на рівні
   - Базова AI логіка (виявлення автомобіля, переслідування, атака)
   - Object Pool для ефективного управління ворогами

3. **Турель та стрільба**:
   - Обертання турелі за input (миша/тач)
   - Система стрільби з кулдауном
   - Object Pool для куль
   - Колізія куль з ворогами

4. **Камера та UI**:
   - Два режими камери (статичний та слідкуючий)
   - HP бар автомобіля
   - Екрани перемоги/поразки
   - Кнопка рестарту

5. **Ігрова логіка**:
   - Умови перемоги (досягнення кінця рівня)
   - Умови поразки (HP = 0)
   - Система рестарту рівня

## Майбутні вдосконалення
1. **Візуальні ефекти**:
   - Muzzle flash при стрільбі
   - Ефекти попадання куль
   - Ефекти знищення ворогів
   - Particle effects для руху автомобіля

2. **Звукові ефекти**:
   - Звуки двигуна
   - Звуки стрільби
   - Звуки попадання
   - Звуки знищення ворогів
   - Фонова музика

3. **Розширена система ворогів**:
   - Різні типи ворогів з унікальними характеристиками
   - Анімації для ворогів
   - Складніша AI логіка

4. **Розширена ігрова механіка**:
   - Бонуси та підсилення
   - Різні типи зброї для турелі
   - Система прогресії (покращення автомобіля/турелі)

# Логічна послідовність розробки

1. **Фундаментальні системи**:
   - Налаштування проекту та інтеграція VContainer/UniTask
   - Створення базових інтерфейсів та ScriptableObjects
   - Налаштування DI контейнера

2. **Базова механіка руху**:
   - Імпорт та налаштування асетів
   - Реалізація CarController з рухом вперед
   - Система здоров'я для автомобіля

3. **Система ворогів**:
   - EnemyController з State Machine
   - Процедурна генерація ворогів
   - Object Pool для ворогів

4. **Турель та стрільба**:
   - TurretController з обертанням
   - Система стрільби з Object Pool для куль
   - Input система для керування турелею

5. **Камера та UI**:
   - CameraController з двома режимами
   - Базовий UI (HP бар, екрани перемоги/поразки)

6. **Інтеграція та поліровка**:
   - GameManager з логікою гри
   - Тестування всіх сценаріїв
   - Фінальні налаштування та оптимізація

# Ризики та їх пом'якшення

## Технічні виклики
1. **Продуктивність при великій кількості ворогів**:
   - Використання Object Pool для оптимізації створення/знищення об'єктів
   - Оптимізація AI логіки ворогів
   - LOD система для віддалених об'єктів

2. **Плавність руху та колізій**:
   - Ретельне налаштування фізики для автомобіля
   - Оптимізація колізій для уникнення проблем з продуктивністю

3. **Крос-платформна підтримка (ПК/мобільні)**:
   - Абстракція системи вводу для підтримки як миші, так і тач-керування
   - Оптимізація для мобільних пристроїв (якщо планується підтримка)

## Обмеження ресурсів
1. **Часові обмеження**:
   - Фокус на MVP функціоналі перед додатковими функціями
   - Чітка пріоритезація завдань
   - Використання готових рішень де можливо (VContainer, UniTask)

2. **Обмеження асетів**:
   - Ефективне використання наданих асетів
   - Фокус на геймплеї, а не на візуальних аспектах для MVP

# Додаток

## Технічні специфікації

### Структура проекту
```
Scripts/
├── Core/
│   ├── Interfaces/
│   ├── Config/
│   └── DI/
├── Gameplay/
│   ├── Car/
│   ├── Enemy/
│   ├── Turret/
│   └── Camera/
├── UI/
└── Managers/
```

### Конфігурації (ScriptableObjects)
1. **CarConfig**:
   - moveSpeed: 10f
   - maxHP: 100f
   - acceleration: 5f

2. **EnemyConfig**:
   - maxHP: 30f
   - chaseSpeed: 8f
   - detectionRange: 15f
   - attackRange: 2f
   - attackDamage: 10f
   - attackCooldown: 1f

3. **GameConfig**:
   - levelLength: 200f
   - enemyCount: 20
   - enemySpawnRangeX: (-10f, 10f)
   - bulletSpeed: 20f
   - bulletDamage: 25f
   - shootCooldown: 0.3f

### Використання UniTask
- Async завантаження рівня
- Плавні переходи камери між режимами
- Delay між атаками ворогів
- Асинхронна ініціалізація компонентів

### Критерії завершення MVP
- ✅ Авто рухається вперед з HP системою
- ✅ Вороги генеруються, переслідують та атакують автомобіль
- ✅ Турель обертається та стріляє по ворогах
- ✅ Камера перемикається між статичним та слідкуючим режимами
- ✅ Реалізовані умови перемоги/поразки та функція рестарту
</PRD>